#########################
#    PowerShell Help    #
#########################

<#
.SYNOPSIS
    This script is designed to deploy printers to Windows 10 workstations deployed and triggered by Intune.
.DESCRIPTION
    Origingally written by Jean-Pierre Simonis, Delivery Quality Assurance and modified by Matt Snider, Palmetto Technology Group
    Version 1.1

    #########################
    #      Change Log       #
    #########################
    
    # 23/11/2017 1.1
    # Features
    # - Add support for MSI install keys so that script deployment via Intune reports as successful
    #
    # 10/11/2017 v1.0 - Initial Release
    #  Features
    # - Error trapping and logging 
    # - Unzip Printer Driver package
    # - Install Local Printer Queue
   
.NOTES

    #########################
    #         Notes         #
    #########################

    # This script is designed to be packaged as an exe and pushed out via Intune 
    #
    #
    # This script requires the following permissions
    # 
    #  - Elevated PowerShell Session first time only to create custom eventlog type
    #  - Permission to update install the printer (Assumed it will run in Intune installation context)
    #  - Your endpoint protection may need this package to be added as an exception as it might detect and block it as this script extracts itself and launch a script in an administrative context

    # Installation
    # 1. Ensure script is run against Windows 10 devices with at least PowerShell V5.1
    # 2. Create printer driver zip file
    # 3. Configure variables in PowerShell Script to desired printer configuration supply name of driver zip file
    # 4. Create batch file to launch PowerShell script (Refer below instructions for contents of batch file) 
    # 5. Create Self-extracting executable (I used WinRAR) 
    #       a.	Configure it to extract to temporary directory
    #       b.	Configure post launch a command (deploy.bat)
    #       c.	Configure Icon, Overwrite (Replace) and Title settings
    #       d.	Configure for silent extraction (hidden dialogs)
    #       e.  Ensure deploy.bat, Deploy-Printer.ps1, PrinterDriver.zip are added to archive
    # 6. Use MSI Wrapper to convert the EXE to MSI
    #       a. download from http://www.exemsi.com
    #       b. Configure MSI Settings
    #              Application ID (ensure this value is the same as defined in script configuration)
    #              Deploy Printer Package 1
    #              Upgrade Code (This can generated by MSI Wrapper)
    #              {E6454CC0-00B2-4134-9D28-9089E5628C4B}
    #              Product Name
    #              Deploy Printer Package
    #              Version
    #              1.0.0.0
    #              Icon
    #              PowerShell.ico (I downloaded and used a powershell logo in ico format)
    #              Comments
    #              PowerShell Script to Deploy Campus Side Printer
    #
    # 7. (Optional) Use ORCA to modify MSI tables to update product name to remove (wrapped by MSI Wrapper in title or buy the product)
    #        a. download from https://msdn.microsoft.com/en-us/library/windows/desktop/aa370557(v=vs.85).aspx
    # 8. Configure Intune to deploy LOB Windows Application
    # 9. Enjoy Customer Success 😊

    # Contents of deploy.bat

    @echo off
    REM Written by Jean-Pierre Simonis, Delivery Quality Assurance, www.deliveryqa.com.au
 
    @echo Launching Printer Deployment PowerShell Script
    powershell.exe -executionpolicy unrestricted -file .\Deploy-Printer.ps1

    # End of Script

.LINK
http://www.deliveryqa.com.au
#>

#########################
#   Pre-req Functions   #
#########################

#Function to log to file and write output to host
#Logging can be configured through the logging section in the Configuration area of this script.

Function LogWrite
{
    Param (
    [Parameter(Mandatory=$True)]
    [string]$Logstring,
    [Parameter(Mandatory=$True)]
    [string]$type,
    [Parameter(Mandatory=$False)]
    [string]$v    
    )
    #Check if Logging is wanted
    if ($global:logging -eq $true) {
        
        #Determine Log Entry Type        
        Switch ($type){
            start { 
                $logType = "[Start]"
                $elogtype = "Information"
                $logColour = "Green"
            }
            i { 
                $logType = "[Info]"
                $elogtype = "Information"
                $logColour = "White"
            }
            w { 
                $logType = "[Warning]"
                $elogtype = "Warning"
                $logColour = "Yellow"
            }
            e { 
                $logType = "[Error]"
                $elogtype = "Error"
                $logColour = "Red"
            }
            end { 
                $logType = "[End]"
                $elogtype = "Information"
                $logColour = "Green"
            }
        }
        #Log Time Date for each log entry
        if ($global:logTimeDate -eq $true) {
            $TimeStamp = Get-Date -Format "yyyy-MM-dd-HH:mm"
            $TimeStamp = "[$TimeStamp]"
        } else {
            $TimeStamp = $Null
        }
        #Create Eventlog Source
        if ($global:logtoEventlog -eq $true) {
            #Check if log source exists
            $checkLogSourceExists = [System.Diagnostics.EventLog]::SourceExists("$global:eventlogSource")
            if ($checkLogSourceExists -eq $False) {
                New-EventLog -LogName Application -Source $global:eventlogSource -ErrorAction SilentlyContinue
            }
        }

        #Check if Verbose logging enabled and of log entry is marked as verbose
        if ($global:verboselog -eq $true -and $v -eq $true){
            #Check if Log Entry is marked as verbose       
                if ($global:logtoFile -eq $true) {Add-Content $Logfile -value "$TimeStamp[Verbose]$logType $logstring" -ErrorAction Stop}
                if ($global:logtoEventlog -eq $true) {Write-EventLog –LogName Application –Source global:eventlogSource –EntryType $elogtype –EventID 1 –Message $logstring -ErrorAction Stop}
                Write-Host "[Verbose]$logType $logstring" -ForegroundColor $logColour

        } else {
            #Check if log is verbose if it is dont log it otherwise log a standard entry
            if ($v -eq $true) {        
                #Do Nothing
            } else {
                #Write Standard Log Entry
                if ($global:logtoFile -eq $true) {Add-Content $Logfile -value "$TimeStamp$logType $logstring" -ErrorAction Stop}
                if ($global:logtoEventlog -eq $true) {Write-EventLog –LogName Application –Source $global:eventlogSource –EntryType $elogtype –EventID 1 –Message $logstring -ErrorAction Stop}
            }

            #Write Standard Log Entries to Screen if verbose logging is enabled
            if ($global:verboselog -eq $true){
                Write-Host "$logType $logstring" -ForegroundColor $logColour
            }
        }

    }
}



######################
# General Parameters #
######################

    #Current Script Location
    $PSScriptRoot = Split-Path -Parent -Path $MyInvocation.MyCommand.Definition
    #Current Time and Date
    $TimeDate = Get-Date -Format "yyyy-MM-dd-HH:mm:ss"
    #MSI Application ID (required so that Intune knows script package successfully deployed)
    #Note: Ensure when creating MSI that the Application ID is the same one defined in this variable.
    $ApplicationID = "Deploy CBC Printers"
    #Install Path (Path to unzip driver and script to)
    $InstallPath = "$env:PROGRAMFILES" + "\Sharp Drivers"
    #Zip File Name (Zipped up Driver)
    $ZipFile = "$PSScriptRoot\Sharp Drivers.zip"

    # Logging
    $Logfile = ($PSScriptRoot + "\Logs\" + $TimeDate + "-DeployPrinter.log")
    $global:logging = $true
    $global:verboselog = $false
    $global:logtoEventlog = $true
    $global:logtoFile = $false
    $global:logTimeDate = $true
    $global:eventlogSource = "Deploy-Printer"

    #Start logging and check logfile access
	try 
	{
		LogWrite "$eventlogSource script started - $TimeDate" -type start
	} 
	catch 
	{
        Throw "You don't have write permissions to $logfile, please start an elevated PowerShell prompt or change NTFS permissions"
	}






##########################################
#     111 Upstairs Flyer Parameters      #
##########################################


    #Driver INF to install
    $PrinterDriverInf1 = "ss0emenu.inf"
    #Path to Inf file for printer driver installation
    $InstallDriverPath1 = $InstallPath + "\5140N - M565N\" + $PrinterDriverInf1
    #Printer Names (Seen by End User)
    $PrinterName1 = "111 Upstairs Flyer"
    #Printer Driver Name (Collect from inside INF file)
    $PrinterDriver1 = “SHARP MX-5140N PCL6"
    #Printer Port Names
    $PrinterPortName1 = “111-Upstairs-Flyer”
    #Printer IP Addresses
    $PrinterIPAddress1 = "192.168.10.16"
 


##########################################
#      111 Upstairs B/W Parameters       #
##########################################

    #Driver INF to install
    $PrinterDriverInf2 = "ss0emenu.inf"
    #Path to Inf file for printer driver installation
    $InstallDriverPath2 = $InstallPath + "\5140N - M565N\" + $PrinterDriverInf2
    #Printer Names (Seen by End User)
    $PrinterName2 = "111 Upstairs B/W"
    #Printer Driver Name (Collect from inside INF file)
    $PrinterDriver2 = “SHARP MX-M565N PCL6"
    #Printer Port Names
    $PrinterPortName2 = “111-Upstairs-BW”
    #Printer IP Addresses
    $PrinterIPAddress2 = "192.168.10.24"


##########################################
#      111 Downstairs Parameters         #
##########################################

    #Driver INF to install
    $PrinterDriverInf3 = "ss0emenu.inf"
    #Path to Inf file for printer driver installation
    $InstallDriverPath3 = $InstallPath + "\M365N - 4140N - 2640N - 2610N\" + $PrinterDriverInf3
    #Printer Names (Seen by End User)
    $PrinterName3 = "111 Downstairs"
    #Printer Driver Name (Collect from inside INF file)
    $PrinterDriver3 = “SHARP MX-M365N PCL6"
    #Printer Port Names
    $PrinterPortName3 = “111-Downstairs”
    #Printer IP Addresses
    $PrinterIPAddress3 = "192.168.10.18"


##########################################
#      117 Project Room Parameters       #
##########################################

    #Driver INF to install
    $PrinterDriverInf4 = "ss0emenu.inf"
    #Path to Inf file for printer driver installation
    $InstallDriverPath4 = $InstallPath + "\M365N - 4140N - 2640N - 2610N\" + $PrinterDriverInf4
    #Printer Names (Seen by End User)
    $PrinterName4 = "117 Project Room"
    #Printer Driver Name (Collect from inside INF file)
    $PrinterDriver4 = “SHARP MX-4140N PCL6"
    #Printer Port Names
    $PrinterPortName4 = “117-Project-Room”
    #Printer IP Addresses
    $PrinterIPAddress4 = "192.168.10.17"


##########################################
#      117 Upstairs Room Parameters      #
##########################################

    #Driver INF to install
    $PrinterDriverInf5 = "sr0emenu.inf"
    #Path to Inf file for printer driver installation
    $InstallDriverPath5 = $InstallPath + "\M283N\" + $PrinterDriverInf5
    #Printer Names (Seen by End User)
    $PrinterName5 = "117 Upstairs Room"
    #Printer Driver Name (Collect from inside INF file)
    $PrinterDriver5 = “SHARP MX-M283N PCL6"
    #Printer Port Names
    $PrinterPortName5 = “117-Upstairs-Room”
    #Printer IP Addresses
    $PrinterIPAddress5 = "192.168.10.41"


##########################################
#       119 Downstairs Parameters        #
##########################################

    #Driver INF to install
    $PrinterDriverInf6 = "ss0emenu.inf"
    #Path to Inf file for printer driver installation
    $InstallDriverPath6 = $InstallPath + "\M365N - 4140N - 2640N - 2610N\" + $PrinterDriverInf6
    #Printer Names (Seen by End User)
    $PrinterName6 = "119 Downstairs"
    #Printer Driver Name (Collect from inside INF file)
    $PrinterDriver6 = “SHARP MX-2610N PCL6"
    #Printer Port Names
    $PrinterPortName6 = “119-Downstairs”
    #Printer IP Addresses
    $PrinterIPAddress6 = "192.168.10.30"


##########################################
#      Spartanburg Color Parameters      #
##########################################

    #Driver INF to install
    $PrinterDriverInf7 = "ss0emenu.inf"
    #Path to Inf file for printer driver installation
    $InstallDriverPath7 = $InstallPath + "\M365N - 4140N - 2640N - 2610N\" + $PrinterDriverInf7
    #Printer Names (Seen by End User)
    $PrinterName7 = "Spartanburg Color"
    #Printer Driver Name (Collect from inside INF file)
    $PrinterDriver7 = “SHARP MX-4140N PCL6"
    #Printer Port Names
    $PrinterPortName7 = “Spartanburg-Color”
    #Printer IP Addresses
    $PrinterIPAddress7 = "10.111.1.251"


##########################################
#   Spartanburg Back Office Parameters   #
##########################################

    #Driver INF to install
    $PrinterDriverInf8 = "sr0emenu.inf"
    #Path to Inf file for printer driver installation
    $InstallDriverPath8 = $InstallPath + "\M283N\" + $PrinterDriverInf8
    #Printer Names (Seen by End User)
    $PrinterName8 = "Spartanburg Back Office"
    #Printer Driver Name (Collect from inside INF file)
    $PrinterDriver8 = “SHARP MX-M283N PCL6"
    #Printer Port Names
    $PrinterPortName8 = “Spartanburg-Back-Office”
    #Printer IP Addresses
    $PrinterIPAddress8 = "10.111.1.252"


##########################################
#     Butler Rd. Gallery Parameters      #
##########################################

    #Driver INF to install
    $PrinterDriverInf9 = "ss0emenu.inf"
    #Path to Inf file for printer driver installation
    $InstallDriverPath9 = $InstallPath + "\M365N - 4140N - 2640N - 2610N\" + $PrinterDriverInf9
    #Printer Names (Seen by End User)
    $PrinterName9 = "Butler Rd. Gallery"
    #Printer Driver Name (Collect from inside INF file)
    $PrinterDriver9 = “SHARP MX-2640N PCL6"
    #Printer Port Names
    $PrinterPortName9 = “Butler Rd. Gallery”
    #Printer IP Addresses
    $PrinterIPAddress9 = "10.111.2.70"


##########################################
#     Pelham Rd. Gallery Parameters      #
##########################################

    #Driver INF to install
    $PrinterDriverInf10 = "ss0emenu.inf"
    #Path to Inf file for printer driver installation
    $InstallDriverPath10 = $InstallPath + "\M365N - 4140N - 2640N - 2610N\" + $PrinterDriverInf10
    #Printer Names (Seen by End User)
    $PrinterName10 = "Pelham Rd. Gallery"
    #Printer Driver Name (Collect from inside INF file)
    $PrinterDriver10 = “SHARP MX-2640N PCL6"
    #Printer Port Names
    $PrinterPortName10 = “Pelham Rd. Gallery”
    #Printer IP Addresses
    $PrinterIPAddress10 = "10.111.10.70"
 

##########################################
#       Easley Gallery Parameters        #
##########################################

    #Driver INF to install
    $PrinterDriverInf11 = "ss0emenu.inf"
    #Path to Inf file for printer driver installation
    $InstallDriverPath11 = $InstallPath + "\M365N - 4140N - 2640N - 2610N\" + $PrinterDriverInf11
    #Printer Names (Seen by End User)
    $PrinterName11 = "Easley Gallery"
    #Printer Driver Name (Collect from inside INF file)
    $PrinterDriver11 = “SHARP MX-2640N PCL6"
    #Printer Port Names
    $PrinterPortName11 = “Easley Gallery”
    #Printer IP Addresses
    $PrinterIPAddress11 = "10.111.6.70"


##########################################
#       Seneca Gallery Parameters        #
##########################################

    #Driver INF to install
    $PrinterDriverInf12 = "ss0emenu.inf"
    #Path to Inf file for printer driver installation
    $InstallDriverPath12 = $InstallPath + "\M365N - 4140N - 2640N - 2610N\" + $PrinterDriverInf12
    #Printer Names (Seen by End User)
    $PrinterName12 = "Seneca Gallery"
    #Printer Driver Name (Collect from inside INF file)
    $PrinterDriver12 = “SHARP MX-2640N PCL6"
    #Printer Port Names
    $PrinterPortName12 = “Seneca Gallery”
    #Printer IP Addresses
    $PrinterIPAddress12 = "10.111.8.11"


##########################################
#       Main St. Gallery Parameters      #
##########################################

    #Driver INF to install
    $PrinterDriverInf13 = "ss0emenu.inf"
    #Path to Inf file for printer driver installation
    $InstallDriverPath13 = $InstallPath + "\M365N - 4140N - 2640N - 2610N\" + $PrinterDriverInf13
    #Printer Names (Seen by End User)
    $PrinterName13 = "Main St. Gallery"
    #Printer Driver Name (Collect from inside INF file)
    $PrinterDriver13 = “SHARP MX-2610N PCL6"
    #Printer Port Names
    $PrinterPortName13 = “Main St. Gallery”
    #Printer IP Addresses
    $PrinterIPAddress13 = "192.168.30.70"






#######################
#      Functions      #
#######################

function unzip ($file,$ExtractPath) {
    LogWrite "Extracting $file to $ExtractPath" -type i
    expand-archive -Path $file -DestinationPath $ExtractPath -Force
}

#######################
#      Execution      #
#######################

try
{

    LogWrite "Checking $InstallPath exists if not create path" -type i -v $true
    $CheckInstallPath = test-path -path $InstallPath
    If ($CheckInstallPath -ne $true) {
        New-Item -ItemType "Directory" -Path $InstallPath -Force
    }

    #Add registry entries so powershell registers as successfully run MSI for MSI deployment
    #New-Item -path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall -Name $ApplicationID
    #New-ItemProperty -path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\$ApplicationID -Name UninstallString -PropertyType String -Value $ApplicationID

    #Unzip Printer Driver zip to installation path
    LogWrite "Unzip Printer Driver zip to installation path" -type i
    $ExtractDriver = Unzip $ZipFile $InstallPath
       
    #Import Printer Driver into Windows Driver Store
    #Note: the sysnative path below is required so pnputil can be found when deploying via intune for 64bit OSes.
    #if you want to test interactively temporary change the path to system32
    LogWrite "Import Printer Driver:$InstallDriverPath into Windows Driver Store" -type i
    $PNPUtil = $env:windir + "\Sysnative\" + 'pnputil.exe'
    #$PNPUtil = $env:windir + "\System32\" + 'pnputil.exe'
    & $PNPUtil /add-driver $InstallDriverPath1
    & $PNPUtil /add-driver $InstallDriverPath2
    & $PNPUtil /add-driver $InstallDriverPath3
    & $PNPUtil /add-driver $InstallDriverPath4
    & $PNPUtil /add-driver $InstallDriverPath5
    & $PNPUtil /add-driver $InstallDriverPath6
    & $PNPUtil /add-driver $InstallDriverPath7
    & $PNPUtil /add-driver $InstallDriverPath8
    & $PNPUtil /add-driver $InstallDriverPath9
    & $PNPUtil /add-driver $InstallDriverPath10
    & $PNPUtil /add-driver $InstallDriverPath11
    & $PNPUtil /add-driver $InstallDriverPath12
    & $PNPUtil /add-driver $InstallDriverPath13

    #Add Printer Driver so it is available for use to create a printer with
    LogWrite "Add Printer Driver: $PrinterDriver1 so it is available for use to create a printer with" -type i
    Add-PrinterDriver -Name $PrinterDriver1
    Write-Output "Installing Driver for 111 Upstairs Flyer"
    LogWrite "Add Printer Driver: $PrinterDriver2 so it is available for use to create a printer with" -type i
    Add-PrinterDriver -Name $PrinterDriver2
    Write-Output "Installing Driver for 111 Upstairs B/W"
    LogWrite "Add Printer Driver: $PrinterDriver3 so it is available for use to create a printer with" -type i
    Add-PrinterDriver -Name $PrinterDriver3
    Write-Output "Installing Driver for 111 Downstairs"
    LogWrite "Add Printer Driver: $PrinterDriver4 so it is available for use to create a printer with" -type i
    Add-PrinterDriver -Name $PrinterDriver4
    Write-Output "Installing Driver for 117 Project Room"
    LogWrite "Add Printer Driver: $PrinterDriver5 so it is available for use to create a printer with" -type i
    Add-PrinterDriver -Name $PrinterDriver5
    Write-Output "Installing Driver for 117 Upstairs Room"
    LogWrite "Add Printer Driver: $PrinterDriver6 so it is available for use to create a printer with" -type i
    Add-PrinterDriver -Name $PrinterDriver6
    Write-Output "Installing Driver for 119 Downstairs"
    LogWrite "Add Printer Driver: $PrinterDriver7 so it is available for use to create a printer with" -type i
    Add-PrinterDriver -Name $PrinterDriver7
    Write-Output "Installing Driver for Spartanburg Color"
    LogWrite "Add Printer Driver: $PrinterDriver8 so it is available for use to create a printer with" -type i
    Add-PrinterDriver -Name $PrinterDriver8
    Write-Output "Installing Driver for Spartanburg Back Office"
    LogWrite "Add Printer Driver: $PrinterDriver9 so it is available for use to create a printer with" -type i
    Add-PrinterDriver -Name $PrinterDriver9
    Write-Output "Installing Driver for Butler Rd. Gallery"
    LogWrite "Add Printer Driver: $PrinterDriver10 so it is available for use to create a printer with" -type i
    Add-PrinterDriver -Name $PrinterDriver10
    Write-Output "Installing Driver for Pelham Rd. Gallery"
    LogWrite "Add Printer Driver: $PrinterDriver11 so it is available for use to create a printer with" -type i
    Add-PrinterDriver -Name $PrinterDriver11
    Write-Output "Installing Driver for Easley Gallery"
    LogWrite "Add Printer Driver: $PrinterDriver12 so it is available for use to create a printer with" -type i
    Add-PrinterDriver -Name $PrinterDriver12
    Write-Output "Installing Driver for Seneca Gallery"
    LogWrite "Add Printer Driver: $PrinterDriver13 so it is available for use to create a printer with" -type i
    Add-PrinterDriver -Name $PrinterDriver13
    Write-Output "Installing Driver for Main St. Gallery"
       
    #Create Standard TCPIP Ports
    LogWrite "Create Standard TCPIP Port: $PrinterPortName1" -type i
    Add-PrinterPort -Name $PrinterPortName1 -PrinterHostAddress $PrinterIPAddress1
    LogWrite "Create Standard TCPIP Port: $PrinterPortName2" -type i
    Add-PrinterPort -Name $PrinterPortName2 -PrinterHostAddress $PrinterIPAddress2
    LogWrite "Create Standard TCPIP Port: $PrinterPortName3" -type i
    Add-PrinterPort -Name $PrinterPortName3 -PrinterHostAddress $PrinterIPAddress3
    LogWrite "Create Standard TCPIP Port: $PrinterPortName4" -type i
    Add-PrinterPort -Name $PrinterPortName4 -PrinterHostAddress $PrinterIPAddress4
    LogWrite "Create Standard TCPIP Port: $PrinterPortName5" -type i
    Add-PrinterPort -Name $PrinterPortName5 -PrinterHostAddress $PrinterIPAddress5
    LogWrite "Create Standard TCPIP Port: $PrinterPortName6" -type i
    Add-PrinterPort -Name $PrinterPortName6 -PrinterHostAddress $PrinterIPAddress6
    LogWrite "Create Standard TCPIP Port: $PrinterPortName7" -type i
    Add-PrinterPort -Name $PrinterPortName7 -PrinterHostAddress $PrinterIPAddress7
    LogWrite "Create Standard TCPIP Port: $PrinterPortName8" -type i
    Add-PrinterPort -Name $PrinterPortName8 -PrinterHostAddress $PrinterIPAddress8
    LogWrite "Create Standard TCPIP Port: $PrinterPortName9" -type i
    Add-PrinterPort -Name $PrinterPortName9 -PrinterHostAddress $PrinterIPAddress9
    LogWrite "Create Standard TCPIP Port: $PrinterPortName10" -type i
    Add-PrinterPort -Name $PrinterPortName10 -PrinterHostAddress $PrinterIPAddress10
    LogWrite "Create Standard TCPIP Port: $PrinterPortName11" -type i
    Add-PrinterPort -Name $PrinterPortName11 -PrinterHostAddress $PrinterIPAddress11
    LogWrite "Create Standard TCPIP Port: $PrinterPortName12" -type i
    Add-PrinterPort -Name $PrinterPortName12 -PrinterHostAddress $PrinterIPAddress12
    LogWrite "Create Standard TCPIP Port: $PrinterPortName13" -type i
    Add-PrinterPort -Name $PrinterPortName13 -PrinterHostAddress $PrinterIPAddress13


    #Create Printers
    LogWrite "Deploying $PrinterName1" -type i
    Add-Printer -Name $PrinterName1 -PortName $PrinterPortName1 -DriverName $PrinterDriver1
    Write-Output "Installing 111 Upstairs Flyer"
    LogWrite "Deploying $PrinterName2" -type i
    Add-Printer -Name $PrinterName2 -PortName $PrinterPortName2 -DriverName $PrinterDriver2
    Write-Output "Installing 111 Upstairs B/W"
    LogWrite "Deploying $PrinterName3" -type i
    Add-Printer -Name $PrinterName3 -PortName $PrinterPortName3 -DriverName $PrinterDriver3
    Write-Output "Installing 111 Downstairs"
    LogWrite "Deploying $PrinterName4" -type i
    Add-Printer -Name $PrinterName4 -PortName $PrinterPortName4 -DriverName $PrinterDriver4
    Write-Output "Installing 117 Project Room"
    LogWrite "Deploying $PrinterName5" -type i
    Add-Printer -Name $PrinterName5 -PortName $PrinterPortName5 -DriverName $PrinterDriver5
    Write-Output "Installing 117 Upstairs Room"
    LogWrite "Deploying $PrinterName6" -type i
    Add-Printer -Name $PrinterName6 -PortName $PrinterPortName6 -DriverName $PrinterDriver6
    Write-Output "Installing 119 Downstairs"
    LogWrite "Deploying $PrinterName7" -type i
    Add-Printer -Name $PrinterName7 -PortName $PrinterPortName7 -DriverName $PrinterDriver7
    Write-Output "Installing Spartanburg Color"
    LogWrite "Deploying $PrinterName8" -type i
    Add-Printer -Name $PrinterName8 -PortName $PrinterPortName8 -DriverName $PrinterDriver8
    Write-Output "Installing Spartanburg Back Office"
    LogWrite "Deploying $PrinterName9" -type i
    Add-Printer -Name $PrinterName9 -PortName $PrinterPortName9 -DriverName $PrinterDriver9
    Write-Output "Installing Butler Rd. Gallery"
    LogWrite "Deploying $PrinterName10" -type i
    Add-Printer -Name $PrinterName10 -PortName $PrinterPortName10 -DriverName $PrinterDriver10
    Write-Output "Installing Pelham Rd. Gallery"
    LogWrite "Deploying $PrinterName11" -type i
    Add-Printer -Name $PrinterName11 -PortName $PrinterPortName11 -DriverName $PrinterDriver11
    Write-Output "Installing Easley Gallery"
    LogWrite "Deploying $PrinterName12" -type i
    Add-Printer -Name $PrinterName12 -PortName $PrinterPortName12 -DriverName $PrinterDriver12
    Write-Output "Installing Seneca Gallery"
    LogWrite "Deploying $PrinterName13" -type i
    Add-Printer -Name $PrinterName13 -PortName $PrinterPortName13 -DriverName $PrinterDriver13
    Write-Output "Installing Main St. Gallery"

    #End of Script
    LogWrite "$eventlogSource script completed successfully- $TimeDate" -type end
    Write-Output "********************************** ALL DONE! ******************************************"
}
catch [system.exception]
{
	$err = $_.Exception.Message
	LogWrite "Unable to deploy printer, `r`nError: $err" -type e
    #End of Script
    LogWrite "$eventlogSource script completed unsuccessfully- $TimeDate" -type end
} 